--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.8) ~  Much Love, Ferib 

]]--

local v0 = string.char;
local v1 = string.byte;
local v2 = string.sub;
local v3 = bit32 or bit;
local v4 = v3.bxor;
local v5 = table.concat;
local v6 = table.insert;
local function v7(v24, v25)
	local v26 = {};
	for v41 = 1, #v24 do
		v6(v26, v0(v4(v1(v2(v24, v41, v41 + 1)), v1(v2(v25, 1 + (v41 % #v25), 1 + (v41 % #v25) + 1))) % 256));
	end
	return v5(v26);
end
local v8 = tonumber;
local v9 = string.byte;
local v10 = string.char;
local v11 = string.sub;
local v12 = string.gsub;
local v13 = string.rep;
local v14 = table.concat;
local v15 = table.insert;
local v16 = math.ldexp;
local v17 = getfenv or function()
	return _ENV;
end;
local v18 = setmetatable;
local v19 = pcall;
local v20 = select;
local v21 = unpack or table.unpack;
local v22 = tonumber;
local function v23(v27, v28, ...)
	local v29 = 1;
	local v30;
	v27 = v12(v11(v27, 15 - 10), v7("\204\54", "\130\226\24\145\94\95\153"), function(v42)
		if (v9(v42, 2) == 81) then
			local v102 = 0;
			while true do
				if (v102 == 0) then
					v30 = v8(v11(v42, 1, 1));
					return "";
				end
			end
		else
			local v103 = 0;
			local v104;
			while true do
				if (v103 == 0) then
					v104 = v10(v8(v42, 16));
					if v30 then
						local v121 = 0;
						local v122;
						while true do
							if (v121 == 0) then
								v122 = v13(v104, v30);
								v30 = nil;
								v121 = 1;
							end
							if (v121 == 1) then
								return v122;
							end
						end
					else
						return v104;
					end
					break;
				end
			end
		end
	end);
	local function v31(v43, v44, v45)
		if v45 then
			local v105 = (v43 / (2 ^ (v44 - 1))) % (2 ^ (((v45 - 1) - (v44 - (2 - 1))) + 1));
			return v105 - (v105 % 1);
		else
			local v106 = 2 ^ (v44 - 1);
			return (((v43 % (v106 + v106)) >= v106) and 1) or 0;
		end
	end
	local function v32()
		local v46 = 0;
		local v47;
		while true do
			if (v46 == 0) then
				v47 = v9(v27, v29, v29);
				v29 = v29 + 1;
				v46 = 1;
			end
			if (v46 == 1) then
				return v47;
			end
		end
	end
	local function v33()
		local v48, v49 = v9(v27, v29, v29 + 2);
		v29 = v29 + 2;
		return (v49 * (493 - 237)) + v48;
	end
	local function v34()
		local v50 = 0;
		local v51;
		local v52;
		local v53;
		local v54;
		while true do
			if (1 == v50) then
				return (v54 * (16777835 - (555 + 64))) + (v53 * 65536) + (v52 * 256) + v51;
			end
			if (v50 == 0) then
				v51, v52, v53, v54 = v9(v27, v29, v29 + 3);
				v29 = v29 + (10 - 6);
				v50 = 1;
			end
		end
	end
	local function v35()
		local v55 = 0;
		local v56;
		local v57;
		local v58;
		local v59;
		local v60;
		local v61;
		while true do
			if (v55 == 2) then
				v60 = v31(v57, 21, 31);
				v61 = ((v31(v57, 32) == 1) and -1) or 1;
				v55 = 3;
			end
			if (3 == v55) then
				if (v60 == 0) then
					if (v59 == 0) then
						return v61 * 0;
					else
						local v123 = 0;
						while true do
							if (v123 == 0) then
								v60 = 1;
								v58 = 568 - (367 + 201);
								break;
							end
						end
					end
				elseif (v60 == (2974 - (214 + 713))) then
					return ((v59 == 0) and (v61 * (1 / 0))) or (v61 * NaN);
				end
				return v16(v61, v60 - 1023) * (v58 + (v59 / (2 ^ 52)));
			end
			if (v55 == 1) then
				v58 = 1;
				v59 = (v31(v57, 1, 20) * (2 ^ (963 - (857 + 74)))) + v56;
				v55 = 2;
			end
			if (v55 == 0) then
				v56 = v34();
				v57 = v34();
				v55 = 1;
			end
		end
	end
	local function v36(v62)
		local v63 = 0;
		local v64;
		local v65;
		while true do
			if (v63 == 2) then
				v65 = {};
				for v109 = 1, #v64 do
					v65[v109] = v10(v9(v11(v64, v109, v109)));
				end
				v63 = 3;
			end
			if (v63 == 0) then
				v64 = nil;
				if not v62 then
					v62 = v34();
					if (v62 == 0) then
						return "";
					end
				end
				v63 = 1;
			end
			if (v63 == 3) then
				return v14(v65);
			end
			if (v63 == 1) then
				v64 = v11(v27, v29, (v29 + v62) - 1);
				v29 = v29 + v62;
				v63 = 2;
			end
		end
	end
	local v37 = v34;
	local function v38(...)
		return {...}, v20("#", ...);
	end
	local function v39()
		local v66 = {};
		local v67 = {};
		local v68 = {};
		local v69 = {v66,v67,nil,v68};
		local v70 = v34();
		local v71 = {};
		for v79 = 1, v70 do
			local v80 = v32();
			local v81;
			if (v80 == 1) then
				v81 = v32() ~= 0;
			elseif (v80 == 2) then
				v81 = v35();
			elseif (v80 == (1 + 2)) then
				v81 = v36();
			end
			v71[v79] = v81;
		end
		v69[3] = v32();
		for v83 = 1, v34() do
			local v84 = 0;
			local v85;
			while true do
				if (0 == v84) then
					v85 = v32();
					if (v31(v85, 1, 1) == 0) then
						local v117 = 0;
						local v118;
						local v119;
						local v120;
						while true do
							if (2 == v117) then
								if (v31(v119, 1, 1) == 1) then
									v120[2] = v71[v120[2]];
								end
								if (v31(v119, 2, 1639 - (1523 + 114)) == 1) then
									v120[3] = v71[v120[3]];
								end
								v117 = 3;
							end
							if (3 == v117) then
								if (v31(v119, 3, 3) == 1) then
									v120[4] = v71[v120[4 + 0]];
								end
								v66[v83] = v120;
								break;
							end
							if (v117 == 0) then
								v118 = v31(v85, 2, 3);
								v119 = v31(v85, 4, 6);
								v117 = 1;
							end
							if (v117 == 1) then
								v120 = {v33(),v33(),nil,nil};
								if (v118 == 0) then
									v120[1 + 2] = v33();
									v120[4] = v33();
								elseif (v118 == (878 - (282 + 595))) then
									v120[3] = v34();
								elseif (v118 == 2) then
									v120[3] = v34() - (2 ^ 16);
								elseif (v118 == 3) then
									local v135 = 0;
									while true do
										if (v135 == 0) then
											v120[3] = v34() - (2 ^ 16);
											v120[4] = v33();
											break;
										end
									end
								end
								v117 = 2;
							end
						end
					end
					break;
				end
			end
		end
		for v86 = 1, v34() do
			v67[v86 - 1] = v39();
		end
		return v69;
	end
	local function v40(v73, v74, v75)
		local v76 = v73[1];
		local v77 = v73[2];
		local v78 = v73[3 - 0];
		return function(...)
			local v88 = v76;
			local v89 = v77;
			local v90 = v78;
			local v91 = v38;
			local v92 = 1;
			local v93 = -1;
			local v94 = {};
			local v95 = {...};
			local v96 = v20("#", ...) - 1;
			local v97 = {};
			local v98 = {};
			for v107 = 0, v96 do
				if (v107 >= v90) then
					v94[v107 - v90] = v95[v107 + 1];
				else
					v98[v107] = v95[v107 + 1];
				end
			end
			local v99 = (v96 - v90) + (1066 - (68 + 997));
			local v100;
			local v101;
			while true do
				local v108 = 0;
				while true do
					if (v108 == 1) then
						if (v101 <= 63) then
							if (v101 <= 31) then
								if (v101 <= 15) then
									if (v101 <= 7) then
										if (v101 <= 3) then
											if (v101 <= 1) then
												if (v101 == 0) then
													local v136 = v100[2];
													local v137 = {v98[v136](v21(v98, v136 + 1, v93))};
													local v138 = 0;
													for v345 = v136, v100[4] do
														v138 = v138 + 1;
														v98[v345] = v137[v138];
													end
												else
													v98[v100[2]] = v98[v100[3]] / v98[v100[4]];
												end
											elseif (v101 == 2) then
												local v140 = v100[2];
												v98[v140] = v98[v140](v21(v98, v140 + 1, v93));
											else
												v98[v100[1272 - (226 + 1044)]] = not v98[v100[3]];
											end
										elseif (v101 <= 5) then
											if (v101 == (17 - 13)) then
												v98[v100[2]] = v98[v100[3]] * v100[4];
											else
												local v144 = 0;
												local v145;
												local v146;
												while true do
													if (v144 == 1) then
														for v449 = v145 + 1, v93 do
															v15(v146, v98[v449]);
														end
														break;
													end
													if (0 == v144) then
														v145 = v100[2];
														v146 = v98[v145];
														v144 = 1;
													end
												end
											end
										elseif (v101 == 6) then
											local v147 = 0;
											local v148;
											while true do
												if (0 == v147) then
													v148 = v100[2];
													do
														return v98[v148](v21(v98, v148 + 1, v93));
													end
													break;
												end
											end
										else
											local v149 = v100[2];
											v98[v149] = v98[v149]();
										end
									elseif (v101 <= 11) then
										if (v101 <= 9) then
											if (v101 > 8) then
												local v151 = v100[2];
												do
													return v98[v151](v21(v98, v151 + 1, v93));
												end
											else
												local v152 = 0;
												local v153;
												while true do
													if (v152 == 0) then
														v153 = v100[2];
														do
															return v21(v98, v153, v153 + v100[3]);
														end
														break;
													end
												end
											end
										elseif (v101 > (127 - (32 + 85))) then
											if (v98[v100[2]] ~= v100[4]) then
												v92 = v92 + 1 + 0;
											else
												v92 = v100[3];
											end
										else
											local v154 = 0;
											local v155;
											local v156;
											local v157;
											while true do
												if (v154 == 1) then
													v157 = v98[v155] + v156;
													v98[v155] = v157;
													v154 = 2;
												end
												if (v154 == 0) then
													v155 = v100[1 + 1];
													v156 = v98[v155 + 2];
													v154 = 1;
												end
												if (2 == v154) then
													if (v156 > 0) then
														if (v157 <= v98[v155 + 1]) then
															local v505 = 0;
															while true do
																if (v505 == 0) then
																	v92 = v100[3];
																	v98[v155 + 3] = v157;
																	break;
																end
															end
														end
													elseif (v157 >= v98[v155 + 1]) then
														local v506 = 0;
														while true do
															if (0 == v506) then
																v92 = v100[3];
																v98[v155 + 3] = v157;
																break;
															end
														end
													end
													break;
												end
											end
										end
									elseif (v101 <= 13) then
										if (v101 > 12) then
											local v158 = v100[2];
											v98[v158] = v98[v158](v98[v158 + 1]);
										else
											v98[v100[2]] = v98[v100[3]] * v100[4];
										end
									elseif (v101 == 14) then
										v92 = v100[960 - (892 + 65)];
									else
										v98[v100[2]] = v98[v100[7 - 4]] - v98[v100[4]];
									end
								elseif (v101 <= 23) then
									if (v101 <= 19) then
										if (v101 <= 17) then
											if (v101 == 16) then
												v98[v100[2]] = v98[v100[3]] / v100[4];
											else
												do
													return;
												end
											end
										elseif (v101 == 18) then
											local v164 = 0;
											local v165;
											local v166;
											local v167;
											local v168;
											while true do
												if (v164 == 2) then
													for v450 = v165, v93 do
														v168 = v168 + 1;
														v98[v450] = v166[v168];
													end
													break;
												end
												if (v164 == 1) then
													v93 = (v167 + v165) - 1;
													v168 = 0;
													v164 = 2;
												end
												if (v164 == 0) then
													v165 = v100[3 - 1];
													v166, v167 = v91(v98[v165](v21(v98, v165 + 1, v93)));
													v164 = 1;
												end
											end
										else
											v98[v100[2]] = v98[v100[3]] / v98[v100[4]];
										end
									elseif (v101 <= 21) then
										if (v101 > 20) then
											v98[v100[2]] = v98[v100[3]];
										else
											v98[v100[2]] = v98[v100[3]][v100[4]];
										end
									elseif (v101 == (39 - 17)) then
										v98[v100[2]] = v100[3] + v98[v100[4]];
									else
										v98[v100[352 - (87 + 263)]] = v74[v100[3]];
									end
								elseif (v101 <= 27) then
									if (v101 <= 25) then
										if (v101 == 24) then
											if (v98[v100[2]] < v98[v100[4]]) then
												v92 = v92 + 1;
											else
												v92 = v100[3];
											end
										else
											v74[v100[3]] = v98[v100[2]];
										end
									elseif (v101 == 26) then
										if (v100[2] == v98[v100[4]]) then
											v92 = v92 + 1;
										else
											v92 = v100[3];
										end
									else
										v92 = v100[3];
									end
								elseif (v101 <= 29) then
									if (v101 == 28) then
										v98[v100[2]] = v98[v100[183 - (67 + 113)]][v100[4]];
									else
										v98[v100[2]] = #v98[v100[3]];
									end
								elseif (v101 == 30) then
									if (v98[v100[2]] == v100[4]) then
										v92 = v92 + 1 + 0;
									else
										v92 = v100[3];
									end
								else
									local v183 = v100[2];
									local v184, v185 = v91(v98[v183](v98[v183 + 1]));
									v93 = (v185 + v183) - 1;
									local v186 = 0;
									for v348 = v183, v93 do
										local v349 = 0;
										while true do
											if (v349 == 0) then
												v186 = v186 + 1;
												v98[v348] = v184[v186];
												break;
											end
										end
									end
								end
							elseif (v101 <= 47) then
								if (v101 <= 39) then
									if (v101 <= (85 - 50)) then
										if (v101 <= 33) then
											if (v101 > 32) then
												v98[v100[2]] = v75[v100[3]];
											else
												v75[v100[3 + 0]] = v98[v100[2]];
											end
										elseif (v101 == (135 - 101)) then
											v98[v100[2]] = v98[v100[3]] % v100[4];
										else
											local v192 = v100[2];
											do
												return v98[v192](v21(v98, v192 + 1, v100[3]));
											end
										end
									elseif (v101 <= (989 - (802 + 150))) then
										if (v101 == 36) then
											v98[v100[2]] = v100[3] ~= (0 - 0);
										else
											local v194 = v100[2];
											v98[v194](v21(v98, v194 + 1, v93));
										end
									elseif (v101 == 38) then
										v98[v100[2]] = v98[v100[3]] + v98[v100[6 - 2]];
									elseif not v98[v100[2]] then
										v92 = v92 + 1;
									else
										v92 = v100[3];
									end
								elseif (v101 <= 43) then
									if (v101 <= (30 + 11)) then
										if (v101 > 40) then
											local v196 = v100[2];
											local v197 = {v98[v196](v21(v98, v196 + 1, v100[3]))};
											local v198 = 997 - (915 + 82);
											for v350 = v196, v100[4] do
												local v351 = 0;
												while true do
													if (v351 == 0) then
														v198 = v198 + 1;
														v98[v350] = v197[v198];
														break;
													end
												end
											end
										else
											v98[v100[2]] = v100[3];
										end
									elseif (v101 == 42) then
										local v201 = v100[2];
										v98[v201](v98[v201 + (2 - 1)]);
									else
										v98[v100[2]][v100[3]] = v98[v100[4]];
									end
								elseif (v101 <= 45) then
									if (v101 > 44) then
										local v204 = v100[2];
										local v205 = {v98[v204](v21(v98, v204 + 1, v100[3]))};
										local v206 = 0;
										for v352 = v204, v100[3 + 1] do
											local v353 = 0;
											while true do
												if (v353 == 0) then
													v206 = v206 + 1;
													v98[v352] = v205[v206];
													break;
												end
											end
										end
									elseif v98[v100[2]] then
										v92 = v92 + 1;
									else
										v92 = v100[3];
									end
								elseif (v101 == 46) then
									v98[v100[2]] = v98[v100[3]] + v98[v100[4]];
								else
									local v208 = v100[2];
									v98[v208] = v98[v208](v21(v98, v208 + 1, v100[3]));
								end
							elseif (v101 <= 55) then
								if (v101 <= (66 - 15)) then
									if (v101 <= 49) then
										if (v101 > 48) then
											v98[v100[2]] = not v98[v100[3]];
										else
											v98[v100[2]] = v98[v100[3]];
										end
									elseif (v101 > 50) then
										if (v98[v100[2]] < v98[v100[1191 - (1069 + 118)]]) then
											v92 = v92 + 1;
										else
											v92 = v100[3];
										end
									else
										local v213 = v100[2];
										local v214 = v100[4];
										local v215 = v213 + 2;
										local v216 = {v98[v213](v98[v213 + 1], v98[v215])};
										for v354 = 1, v214 do
											v98[v215 + v354] = v216[v354];
										end
										local v217 = v216[1];
										if v217 then
											v98[v215] = v217;
											v92 = v100[6 - 3];
										else
											v92 = v92 + 1;
										end
									end
								elseif (v101 <= 53) then
									if (v101 == (113 - 61)) then
										v98[v100[2]][v98[v100[3]]] = v100[4];
									else
										do
											return v98[v100[1 + 1]];
										end
									end
								elseif (v101 > 54) then
									v98[v100[3 - 1]] = v98[v100[3]] / v100[4 + 0];
								elseif (v98[v100[2]] ~= v98[v100[4]]) then
									v92 = v92 + 1;
								else
									v92 = v100[3];
								end
							elseif (v101 <= 59) then
								if (v101 <= 57) then
									if (v101 > (847 - (368 + 423))) then
										v74[v100[3]] = v98[v100[6 - 4]];
									else
										local v223 = 0;
										local v224;
										local v225;
										local v226;
										while true do
											if (v223 == 1) then
												v226 = 0;
												for v459 = v224, v100[4] do
													local v460 = 0;
													while true do
														if (v460 == 0) then
															v226 = v226 + 1;
															v98[v459] = v225[v226];
															break;
														end
													end
												end
												break;
											end
											if (v223 == 0) then
												v224 = v100[2];
												v225 = {v98[v224](v21(v98, v224 + 1, v93))};
												v223 = 1;
											end
										end
									end
								elseif (v101 > 58) then
									for v357 = v100[2], v100[3] do
										v98[v357] = nil;
									end
								else
									local v227 = v100[2];
									local v228 = {};
									for v359 = 1, #v97 do
										local v360 = 0;
										local v361;
										while true do
											if (0 == v360) then
												v361 = v97[v359];
												for v487 = 0, #v361 do
													local v488 = 0;
													local v489;
													local v490;
													local v491;
													while true do
														if (v488 == 0) then
															v489 = v361[v487];
															v490 = v489[1];
															v488 = 1;
														end
														if (v488 == 1) then
															v491 = v489[2];
															if ((v490 == v98) and (v491 >= v227)) then
																local v534 = 0;
																while true do
																	if (v534 == 0) then
																		v228[v491] = v490[v491];
																		v489[1] = v228;
																		break;
																	end
																end
															end
															break;
														end
													end
												end
												break;
											end
										end
									end
								end
							elseif (v101 <= 61) then
								if (v101 == 60) then
									local v229 = 0;
									local v230;
									local v231;
									local v232;
									while true do
										if (0 == v229) then
											v230 = v100[2];
											v231 = v98[v230];
											v229 = 1;
										end
										if (v229 == 1) then
											v232 = v98[v230 + 2];
											if (v232 > 0) then
												if (v231 > v98[v230 + 1]) then
													v92 = v100[3];
												else
													v98[v230 + 3] = v231;
												end
											elseif (v231 < v98[v230 + 1]) then
												v92 = v100[21 - (10 + 8)];
											else
												v98[v230 + 3] = v231;
											end
											break;
										end
									end
								else
									local v233 = v100[2];
									v98[v233](v21(v98, v233 + 1, v93));
								end
							elseif (v101 == 62) then
								if (v98[v100[2]] == v98[v100[4]]) then
									v92 = v92 + 1;
								else
									v92 = v100[11 - 8];
								end
							else
								local v234 = 0;
								local v235;
								while true do
									if (0 == v234) then
										v235 = v100[2];
										do
											return v98[v235], v98[v235 + 1];
										end
										break;
									end
								end
							end
						elseif (v101 <= 95) then
							if (v101 <= 79) then
								if (v101 <= 71) then
									if (v101 <= 67) then
										if (v101 <= 65) then
											if (v101 > 64) then
												v98[v100[2]] = v98[v100[3]] % v98[v100[4]];
											else
												do
													return v98[v100[2]];
												end
											end
										elseif (v101 > (508 - (416 + 26))) then
											local v237 = 0;
											local v238;
											while true do
												if (v237 == 0) then
													v238 = v100[2];
													do
														return v21(v98, v238, v93);
													end
													break;
												end
											end
										else
											local v239 = 0;
											local v240;
											while true do
												if (v239 == 0) then
													v240 = v100[6 - 4];
													v98[v240] = v98[v240](v21(v98, v240 + 1, v100[3]));
													break;
												end
											end
										end
									elseif (v101 <= 69) then
										if (v101 == 68) then
											if (v100[2] == v98[v100[4]]) then
												v92 = v92 + 1;
											else
												v92 = v100[2 + 1];
											end
										else
											local v241 = v100[2];
											v98[v241] = v98[v241]();
										end
									elseif (v101 > 70) then
										v98[v100[3 - 1]][v98[v100[441 - (145 + 293)]]] = v100[4];
									else
										v98[v100[2]][v98[v100[433 - (44 + 386)]]] = v98[v100[4]];
									end
								elseif (v101 <= 75) then
									if (v101 <= 73) then
										if (v101 == 72) then
											local v247 = 0;
											local v248;
											local v249;
											local v250;
											local v251;
											while true do
												if (v247 == 1) then
													v93 = (v250 + v248) - 1;
													v251 = 0;
													v247 = 2;
												end
												if (v247 == 2) then
													for v462 = v248, v93 do
														local v463 = 0;
														while true do
															if (v463 == 0) then
																v251 = v251 + 1;
																v98[v462] = v249[v251];
																break;
															end
														end
													end
													break;
												end
												if (0 == v247) then
													v248 = v100[2];
													v249, v250 = v91(v98[v248](v98[v248 + 1]));
													v247 = 1;
												end
											end
										else
											v98[v100[2]] = v98[v100[3]][v98[v100[4]]];
										end
									elseif (v101 == 74) then
										if (v98[v100[2]] ~= v98[v100[4]]) then
											v92 = v92 + 1;
										else
											v92 = v100[3];
										end
									else
										do
											return v98[v100[2]]();
										end
									end
								elseif (v101 <= 77) then
									if (v101 == 76) then
										if v98[v100[2]] then
											v92 = v92 + 1;
										else
											v92 = v100[3];
										end
									else
										local v254 = v100[2];
										v98[v254](v21(v98, v254 + 1, v100[3]));
									end
								elseif (v101 > 78) then
									v98[v100[1488 - (998 + 488)]] = v100[3] + v98[v100[4]];
								else
									for v362 = v100[2], v100[1 + 2] do
										v98[v362] = nil;
									end
								end
							elseif (v101 <= 87) then
								if (v101 <= 83) then
									if (v101 <= (67 + 14)) then
										if (v101 > 80) then
											local v256 = v98[v100[4]];
											if not v256 then
												v92 = v92 + 1;
											else
												v98[v100[2]] = v256;
												v92 = v100[3];
											end
										else
											local v257 = 0;
											local v258;
											local v259;
											while true do
												if (v257 == 1) then
													for v464 = v258 + 1, v93 do
														v15(v259, v98[v464]);
													end
													break;
												end
												if (0 == v257) then
													v258 = v100[2];
													v259 = v98[v258];
													v257 = 1;
												end
											end
										end
									elseif (v101 > 82) then
										local v260 = v100[2];
										local v261 = v98[v100[775 - (201 + 571)]];
										v98[v260 + 1] = v261;
										v98[v260] = v261[v100[4]];
									elseif (v98[v100[2]] == v98[v100[4]]) then
										v92 = v92 + 1;
									else
										v92 = v100[3];
									end
								elseif (v101 <= (1223 - (116 + 1022))) then
									if (v101 > 84) then
										v98[v100[2]] = v98[v100[3]] - v98[v100[4]];
									else
										local v266 = 0;
										local v267;
										while true do
											if (v266 == 0) then
												v267 = v100[8 - 6];
												do
													return v98[v267], v98[v267 + 1 + 0];
												end
												break;
											end
										end
									end
								elseif (v101 > 86) then
									v98[v100[7 - 5]][v98[v100[3]]] = v98[v100[4]];
								else
									v98[v100[2]] = v75[v100[3]];
								end
							elseif (v101 <= (323 - 232)) then
								if (v101 <= (948 - (814 + 45))) then
									if (v101 > 88) then
										local v272 = 0;
										local v273;
										local v274;
										local v275;
										while true do
											if (v272 == 1) then
												v275 = {};
												v274 = v18({}, {[v7("\194\242\29\219\74\178\229", "\215\157\173\116\181\46")]=function(v465, v466)
													local v467 = 0;
													local v468;
													while true do
														if (v467 == 0) then
															v468 = v275[v466];
															return v468[1][v468[2]];
														end
													end
												end,[v7("\10\139\133\247\205\60\186\143\247\194", "\186\85\212\235\146")]=function(v469, v470, v471)
													local v472 = 0;
													local v473;
													while true do
														if (v472 == 0) then
															v473 = v275[v470];
															v473[1][v473[4 - 2]] = v471;
															break;
														end
													end
												end});
												v272 = 2;
											end
											if (v272 == 2) then
												for v474 = 1, v100[4] do
													v92 = v92 + 1;
													local v475 = v88[v92];
													if (v475[1] == 21) then
														v275[v474 - 1] = {v98,v475[3]};
													else
														v275[v474 - 1] = {v74,v475[3]};
													end
													v97[#v97 + 1] = v275;
												end
												v98[v100[2]] = v40(v273, v274, v75);
												break;
											end
											if (v272 == 0) then
												v273 = v89[v100[3]];
												v274 = nil;
												v272 = 1;
											end
										end
									else
										local v276 = 0;
										local v277;
										local v278;
										while true do
											if (v276 == 1) then
												v98[v277 + 1] = v278;
												v98[v277] = v278[v100[4]];
												break;
											end
											if (v276 == 0) then
												v277 = v100[2];
												v278 = v98[v100[3]];
												v276 = 1;
											end
										end
									end
								elseif (v101 == 90) then
									v98[v100[2]] = v98[v100[1 + 2]] + v100[4];
								elseif (v98[v100[2]] == v100[4]) then
									v92 = v92 + 1;
								else
									v92 = v100[3];
								end
							elseif (v101 <= 93) then
								if (v101 == 92) then
									local v280 = 0;
									local v281;
									while true do
										if (v280 == 0) then
											v281 = v98[v100[2 + 2]];
											if not v281 then
												v92 = v92 + (886 - (261 + 624));
											else
												v98[v100[2]] = v281;
												v92 = v100[3];
											end
											break;
										end
									end
								else
									v98[v100[2]] = v98[v100[3]] % v98[v100[4]];
								end
							elseif (v101 == 94) then
								local v283 = v100[3 - 1];
								local v284 = v100[4];
								local v285 = v283 + 2;
								local v286 = {v98[v283](v98[v283 + 1], v98[v285])};
								for v364 = 1, v284 do
									v98[v285 + v364] = v286[v364];
								end
								local v287 = v286[1];
								if v287 then
									v98[v285] = v287;
									v92 = v100[3];
								else
									v92 = v92 + (1081 - (1020 + 60));
								end
							else
								v98[v100[1425 - (630 + 793)]] = v74[v100[3]];
							end
						elseif (v101 <= (376 - 265)) then
							if (v101 <= 103) then
								if (v101 <= 99) then
									if (v101 <= 97) then
										if (v101 > (454 - 358)) then
											v98[v100[2]] = #v98[v100[3]];
										else
											v98[v100[2]] = v98[v100[2 + 1]] * v98[v100[4]];
										end
									elseif (v101 > 98) then
										v98[v100[2]]();
									else
										v98[v100[2]] = v100[9 - 6] ~= 0;
									end
								elseif (v101 <= (1848 - (760 + 987))) then
									if (v101 == 100) then
										v98[v100[2]]();
									else
										do
											return;
										end
									end
								elseif (v101 == 102) then
									v98[v100[1915 - (1789 + 124)]] = v100[3];
								else
									local v295 = 0;
									local v296;
									while true do
										if (v295 == 0) then
											v296 = v100[2];
											v98[v296] = v98[v296](v21(v98, v296 + 1, v93));
											break;
										end
									end
								end
							elseif (v101 <= 107) then
								if (v101 <= 105) then
									if (v101 == 104) then
										if not v98[v100[2]] then
											v92 = v92 + 1;
										else
											v92 = v100[769 - (745 + 21)];
										end
									else
										local v297 = 0;
										local v298;
										local v299;
										local v300;
										local v301;
										while true do
											if (v297 == 2) then
												for v477 = v298, v93 do
													local v478 = 0;
													while true do
														if (v478 == 0) then
															v301 = v301 + 1;
															v98[v477] = v299[v301];
															break;
														end
													end
												end
												break;
											end
											if (v297 == 1) then
												v93 = (v300 + v298) - 1;
												v301 = 0;
												v297 = 2;
											end
											if (v297 == 0) then
												v298 = v100[2];
												v299, v300 = v91(v98[v298](v21(v98, v298 + 1, v93)));
												v297 = 1;
											end
										end
									end
								elseif (v101 == 106) then
									local v302 = v100[2];
									do
										return v21(v98, v302, v93);
									end
								else
									v98[v100[2]][v100[3]] = v100[4];
								end
							elseif (v101 <= 109) then
								if (v101 > 108) then
									v98[v100[2]] = v98[v100[3]] % v100[4];
								else
									local v306 = v100[2];
									v98[v306](v21(v98, v306 + 1, v100[3]));
								end
							elseif (v101 > 110) then
								local v307 = 0;
								local v308;
								while true do
									if (v307 == 0) then
										v308 = v100[2];
										v98[v308](v98[v308 + 1]);
										break;
									end
								end
							else
								v98[v100[2]] = v98[v100[3]] + v100[4];
							end
						elseif (v101 <= (41 + 78)) then
							if (v101 <= 115) then
								if (v101 <= 113) then
									if (v101 == 112) then
										do
											return v98[v100[2]]();
										end
									else
										v98[v100[5 - 3]][v100[3]] = v98[v100[4]];
									end
								elseif (v101 > 114) then
									v98[v100[2]][v100[3]] = v100[4];
								else
									v98[v100[7 - 5]] = {};
								end
							elseif (v101 <= 117) then
								if (v101 == 116) then
									local v315 = 0;
									local v316;
									local v317;
									local v318;
									local v319;
									while true do
										if (0 == v315) then
											v316 = v100[2];
											v317, v318 = v91(v98[v316](v21(v98, v316 + 1 + 0, v100[3])));
											v315 = 1;
										end
										if (v315 == 2) then
											for v479 = v316, v93 do
												v319 = v319 + 1 + 0;
												v98[v479] = v317[v319];
											end
											break;
										end
										if (v315 == 1) then
											v93 = (v318 + v316) - 1;
											v319 = 0;
											v315 = 2;
										end
									end
								else
									v75[v100[3]] = v98[v100[2]];
								end
							elseif (v101 > 118) then
								local v322 = 0;
								local v323;
								local v324;
								local v325;
								while true do
									if (v322 == 1) then
										v325 = v98[v323] + v324;
										v98[v323] = v325;
										v322 = 2;
									end
									if (v322 == 0) then
										v323 = v100[2];
										v324 = v98[v323 + (1057 - (87 + 968))];
										v322 = 1;
									end
									if (v322 == 2) then
										if (v324 > 0) then
											if (v325 <= v98[v323 + 1]) then
												v92 = v100[3];
												v98[v323 + 3] = v325;
											end
										elseif (v325 >= v98[v323 + 1]) then
											v92 = v100[3];
											v98[v323 + 3] = v325;
										end
										break;
									end
								end
							else
								v98[v100[2]] = v98[v100[3]] * v98[v100[4]];
							end
						elseif (v101 <= 123) then
							if (v101 <= 121) then
								if (v101 == 120) then
									local v327 = 0;
									local v328;
									local v329;
									while true do
										if (v327 == 0) then
											v328 = v100[2];
											v329 = {};
											v327 = 1;
										end
										if (v327 == 1) then
											for v482 = 1, #v97 do
												local v483 = v97[v482];
												for v494 = 0, #v483 do
													local v495 = v483[v494];
													local v496 = v495[1];
													local v497 = v495[2];
													if ((v496 == v98) and (v497 >= v328)) then
														v329[v497] = v496[v497];
														v495[1] = v329;
													end
												end
											end
											break;
										end
									end
								else
									v98[v100[2]] = {};
								end
							elseif (v101 > 122) then
								local v331 = v89[v100[13 - 10]];
								local v332;
								local v333 = {};
								v332 = v18({}, {[v7("\253\190\31\240\61\235\64", "\56\162\225\118\158\89\142")]=function(v367, v368)
									local v369 = 0;
									local v370;
									while true do
										if (v369 == 0) then
											v370 = v333[v368];
											return v370[1 + 0][v370[2]];
										end
									end
								end,[v7("\99\58\206\170\53\209\82\1\197\183", "\184\60\101\160\207\66")]=function(v371, v372, v373)
									local v374 = v333[v372];
									v374[1][v374[4 - 2]] = v373;
								end});
								for v376 = 1, v100[4] do
									v92 = v92 + 1;
									local v377 = v88[v92];
									if (v377[1] == 21) then
										v333[v376 - 1] = {v98,v377[3]};
									else
										v333[v376 - (1414 - (447 + 966))] = {v74,v377[3]};
									end
									v97[#v97 + 1] = v333;
								end
								v98[v100[5 - 3]] = v40(v331, v332, v75);
							else
								local v335 = v100[1819 - (1703 + 114)];
								local v336, v337 = v91(v98[v335](v21(v98, v335 + 1, v100[3])));
								v93 = (v337 + v335) - 1;
								local v338 = 0;
								for v379 = v335, v93 do
									local v380 = 0;
									while true do
										if (v380 == 0) then
											v338 = v338 + (702 - (376 + 325));
											v98[v379] = v336[v338];
											break;
										end
									end
								end
							end
						elseif (v101 <= 125) then
							if (v101 > 124) then
								v98[v100[2]] = v98[v100[3]][v98[v100[4]]];
							elseif (v98[v100[2]] ~= v100[4]) then
								v92 = v92 + 1;
							else
								v92 = v100[3];
							end
						elseif (v101 <= (206 - 80)) then
							local v341 = 0;
							local v342;
							while true do
								if (v341 == 0) then
									v342 = v100[2];
									v98[v342] = v98[v342](v98[v342 + 1]);
									break;
								end
							end
						elseif (v101 == 127) then
							local v403 = v100[2];
							local v404 = v98[v403];
							local v405 = v98[v403 + (5 - 3)];
							if (v405 > 0) then
								if (v404 > v98[v403 + 1]) then
									v92 = v100[3];
								else
									v98[v403 + 3] = v404;
								end
							elseif (v404 < v98[v403 + 1]) then
								v92 = v100[3];
							else
								v98[v403 + 3] = v404;
							end
						else
							local v406 = 0;
							local v407;
							while true do
								if (v406 == 0) then
									v407 = v100[2];
									do
										return v98[v407](v21(v98, v407 + 1, v100[3]));
									end
									break;
								end
							end
						end
						v92 = v92 + 1;
						break;
					end
					if (v108 == 0) then
						v100 = v88[v92];
						v101 = v100[1];
						v108 = 1;
					end
				end
			end
		end;
	end
	return v40(v39(), {}, v28)(...);
end
return v23("LOL!", v17(), ...);